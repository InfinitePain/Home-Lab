# Title: authentik
# Description: Identity provider

version: '3'

services:
  redis:
    image: docker.io/library/redis:7.2.4-alpine
    container_name: redis
    command: --save 60 1 --loglevel warning
    restart: always
    networks:
      - proxy
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - ${DIR_REDIS_DATA}:/data

  auth-server:
    image: ghcr.io/goauthentik/server:2024.2.2
    container_name: authentik
    restart: always
    depends_on:
      - redis
    command: server
    networks:
      - proxy
    # ports:
    #   - "8086:9000"
    #   - "8087:9443"
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: ${POSTGRES_HOST}
      AUTHENTIK_POSTGRESQL__USER: ${POSTGRES_USER}
      AUTHENTIK_POSTGRESQL__NAME: ${POSTGRES_DB}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${POSTGRES_PASSWORD}
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
      AUTHENTIK_EMAIL__HOST: ${AUTHENTIK_EMAIL_HOST}
      AUTHENTIK_EMAIL__PORT: ${AUTHENTIK_EMAIL_PORT}
      AUTHENTIK_EMAIL__USERNAME: ${AUTHENTIK_EMAIL_USERNAME}
      AUTHENTIK_EMAIL__PASSWORD: ${AUTHENTIK_EMAIL_PASSWORD}
      AUTHENTIK_EMAIL__USE_TLS: true
      AUTHENTIK_EMAIL__USE_SSL: false
      AUTHENTIK_EMAIL__TIMEOUT: 10
      AUTHENTIK_EMAIL__FROM: ${AUTHENTIK_EMAIL_FROM}
    volumes:
      - ${DIR_MEDIA}:/media
      - ${DIR_TEMPLATES}:/templates
    labels:
      # Traefik 2.0
      - "traefik.enable=true"
      - "traefik.docker.network=proxy"
      # router: authentik
      - "traefik.http.routers.authentik.entrypoints=https"
      - "traefik.http.routers.authentik.rule=Host(`${DOMAIN_AUTHENTIK}`)"
      - "traefik.http.routers.authentik.service=authentik"
      - "traefik.http.routers.authentik.tls=true"
      - "traefik.http.routers.authentik.tls.certresolver=${CERT_RESOLVER}" # staging or production
      # service: authentik
      - "traefik.http.services.authentik.loadbalancer.server.port=9000"
      # Homepage Dashboard
      - homepage.group=Management
      - homepage.name=Authentik
      - homepage.icon=mdi-key
      - homepage.href=https://${DOMAIN_AUTHENTIK}
      - homepage.description=User Management
      - homepage.weight=20
      - homepage.widget.type=authentik
      - homepage.widget.fields=["users", "loginsLast24H", "failedLoginsLast24H"]
      - homepage.widget.url=https://${DOMAIN_AUTHENTIK}
      - homepage.widget.key=${HOMEPAGE_VAR_AUTHENTIK_KEY}

  auth-worker:
    image: ghcr.io/goauthentik/server:2024.2.2
    container_name: authentik-worker
    restart: always
    command: worker
    depends_on:
      - redis
    networks:
      - proxy
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: ${POSTGRES_HOST}
      AUTHENTIK_POSTGRESQL__USER: ${POSTGRES_USER}
      AUTHENTIK_POSTGRESQL__NAME: ${POSTGRES_DB}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${POSTGRES_PASSWORD}
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
      AUTHENTIK_EMAIL__HOST: ${AUTHENTIK_EMAIL_HOST}
      AUTHENTIK_EMAIL__PORT: ${AUTHENTIK_EMAIL_PORT}
      AUTHENTIK_EMAIL__USERNAME: ${AUTHENTIK_EMAIL_USERNAME}
      AUTHENTIK_EMAIL__PASSWORD: ${AUTHENTIK_EMAIL_PASSWORD}
      AUTHENTIK_EMAIL__USE_TLS: true
      AUTHENTIK_EMAIL__USE_SSL: false
      AUTHENTIK_EMAIL__TIMEOUT: 10
      AUTHENTIK_EMAIL__FROM: ${AUTHENTIK_EMAIL_FROM}
    volumes:
      - ${DIR_MEDIA}:/media
      - ${DIR_TEMPLATES}:/templates
      - ${DIR_CERTS}:/certs

  auth-ldap:
    image: ghcr.io/goauthentik/ldap:2024.2.2
    container_name: authentik-ldap
    restart: always
    networks:
      - proxy
    # ports:
    #   - 389:3389
    #   - 636:6636
    environment:
      AUTHENTIK_HOST: https://auth-server:9443
      AUTHENTIK_INSECURE: "true"
      AUTHENTIK_TOKEN: ${LDAP_TOKEN}
    labels:
      # Traefik 2.0
      - "traefik.enable=true"
      - "traefik.docker.network=proxy"
      # router: auth-ldap
      - "traefik.tcp.routers.auth-ldap.entrypoints=auth-ldap"
      - "traefik.tcp.routers.auth-ldap.rule=HostSNI(`${DOMAIN_LDAP}`)"
      - "traefik.tcp.routers.auth-ldap.middlewares=default-whitelist@file"
      - "traefik.tcp.routers.auth-ldap.service=auth-ldap"
      - "traefik.tcp.routers.auth-ldap.tls=true"
      - "traefik.tcp.routers.auth-ldap.tls.certresolver=${CERT_RESOLVER}" # staging or production
      # service: auth-ldap
      - "traefik.tcp.services.auth-ldap.loadbalancer.server.port=3389"

networks:
  proxy:
    external: true
